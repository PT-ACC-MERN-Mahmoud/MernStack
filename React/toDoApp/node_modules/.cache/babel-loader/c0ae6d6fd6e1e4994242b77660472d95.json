{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Program0907\\\\OneDrive\\\\Desktop\\\\Coding Dojo\\\\MernStack\\\\React\\\\toDoApp\\\\react-todoapp\\\\src\\\\components\\\\TodoList.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; //we need access to this list in different parts of the program and so, we store the list in State.\n\nimport Too from './Todo'; //we import todo to populate the list of todos\n\nimport ToDoForm from './TodoForm'; //we import ToDoForm in order to create todos, which in turn create items in the list\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ToDoList = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]); //storing input to state\n\n  const addTodo = todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      //Validating input is not blank\n      return;\n    }\n\n    const newTodos = [todo, ...todos]; //creating an empty array for newtodos, this is called spread\n\n    setTodos(newTodos); //setting the list with newTodos\n\n    console.log(...todos); //should reflect the new addition \n  };\n\n  const updateToDo = (todoId, newValue) => {\n    //to update a todo, we need the id of the todo and its current value\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      //Validating for notblank for new submission\n      return;\n    }\n\n    setTodos(prev => prev.map(item => item.id === todoId ? newValue : item) //writing new value over previos map\n    );\n  };\n\n  const removeTodo = id => {\n    const removeArr = [...todos].filter(todo => todo.id !== id); //filtering array of todos to isolate target todo\n\n    setTodos(removeArr); //setting new state of todos minus target todo\n  };\n\n  console.log(todos); //should reflect deletion\n  //we validate the data of updated todos by checking for id matches of previous state of to and the current update before setting new state. \n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete; //this syntax sets the state of isComplete based on the boolean id match check. \n      }\n\n      return todo; //return the todos to be updated\n    });\n    setTodos(updatedTodos); // setting updated todo state \n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" What's the Plan for Today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 14\n    }, this), \"   \", /*#__PURE__*/_jsxDEV(ToDoForm, {\n      onSubmit: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToDo, {\n      todos: todos,\n      completeTodo: completeTodo,\n      removeTodo: removeTodo,\n      updateTodo: updateToDo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ToDoList, \"ZATHeV9x55jFrDOww2hwcxQ3V1U=\");\n\n_c = ToDoList;\nexport default ToDoList; // summary of TodoList function\n//     1. import react with useState, TodoForm, and ToDo.\n//     2. Store todo and todos in useState.\n//     3. Add todo function.\n//     4. Add the update function.\n//     5. Add the remove function.\n//     6. Add the complete function.\n//     7. Return the full functionality of the TodoList to the browser.\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["useState","Too","ToDoForm","ToDoList","todos","setTodos","addTodo","todo","text","test","newTodos","console","log","updateToDo","todoId","newValue","prev","map","item","id","removeTodo","removeArr","filter","completeTodo","updatedTodos","isComplete"],"sources":["C:/Users/Program0907/OneDrive/Desktop/Coding Dojo/MernStack/React/toDoApp/react-todoapp/src/components/TodoList.js"],"sourcesContent":["import { useState }  from 'react'; //we need access to this list in different parts of the program and so, we store the list in State.\r\nimport Too from './Todo';         //we import todo to populate the list of todos\r\nimport ToDoForm from './TodoForm'; //we import ToDoForm in order to create todos, which in turn create items in the list\r\n\r\nconst ToDoList = () => {\r\n    const [todos, setTodos] = useState([]); //storing input to state\r\n\r\n\r\nconst addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) { //Validating input is not blank\r\n        return;\r\n    }\r\n        \r\n    const newTodos = [todo, ...todos]; //creating an empty array for newtodos, this is called spread\r\n    \r\n    setTodos(newTodos);      //setting the list with newTodos\r\n    console.log(...todos);   //should reflect the new addition \r\n    };\r\n\r\n\r\n\r\nconst updateToDo = (todoId, newValue) => {                      //to update a todo, we need the id of the todo and its current value\r\n    if(!newValue.text || /^\\s*$/.test(newValue.text)) {               //Validating for notblank for new submission\r\n    return;\r\n    }\r\n    \r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))       //writing new value over previos map\r\n    );\r\n};\r\n\r\n\r\nconst removeTodo = id => {\r\n    const removeArr = [...todos].filter(todo => todo.id !== id);  //filtering array of todos to isolate target todo\r\n\r\n        setTodos(removeArr); //setting new state of todos minus target todo\r\n\r\n    };\r\n\r\n    \r\n    console.log(todos)  //should reflect deletion\r\n    \r\n\r\n//we validate the data of updated todos by checking for id matches of previous state of to and the current update before setting new state. \r\nconst completeTodo = id => {   \r\n    let updatedTodos = todos.map(todo => {\r\n        if (todo.id === id) {\r\n            todo.isComplete = !todo.isComplete; //this syntax sets the state of isComplete based on the boolean id match check. \r\n        }\r\n        return todo;  //return the todos to be updated\r\n    });\r\n    setTodos(updatedTodos);  // setting updated todo state \r\n};\r\n\r\n\r\n\r\nreturn ( \r\n        <>\r\n             <h1> What's the Plan for Today?</h1>   {/*the function returns the following functionalities to the browser */}\r\n            <ToDoForm onSubmit= {addTodo}/> \r\n            <ToDo todos={todos}\r\n            completeTodo={completeTodo}\r\n            removeTodo={removeTodo}\r\n            updateTodo={updateToDo} \r\n        />    \r\n        </>\r\n\r\n    );\r\n}\r\nexport default ToDoList;\r\n\r\n// summary of TodoList function\r\n//     1. import react with useState, TodoForm, and ToDo.\r\n//     2. Store todo and todos in useState.\r\n//     3. Add todo function.\r\n//     4. Add the update function.\r\n//     5. Add the remove function.\r\n//     6. Add the complete function.\r\n//     7. Return the full functionality of the TodoList to the browser.\r\n"],"mappings":";;;AAAA,SAASA,QAAT,QAA0B,OAA1B,C,CAAmC;;AACnC,OAAOC,GAAP,MAAgB,QAAhB,C,CAAkC;;AAClC,OAAOC,QAAP,MAAqB,YAArB,C,CAAmC;;;;;AAEnC,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACnB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC,CADmB,CACqB;;EAG5C,MAAMM,OAAO,GAAGC,IAAI,IAAI;IAChB,IAAI,CAACA,IAAI,CAACC,IAAN,IAAc,QAAQC,IAAR,CAAaF,IAAI,CAACC,IAAlB,CAAlB,EAA2C;MAAE;MAC7C;IACH;;IAED,MAAME,QAAQ,GAAG,CAACH,IAAD,EAAO,GAAGH,KAAV,CAAjB,CALoB,CAKe;;IAEnCC,QAAQ,CAACK,QAAD,CAAR,CAPoB,CAOK;;IACzBC,OAAO,CAACC,GAAR,CAAY,GAAGR,KAAf,EARoB,CAQK;EACxB,CATL;;EAaA,MAAMS,UAAU,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;IAAuB;IAC5D,IAAG,CAACA,QAAQ,CAACP,IAAV,IAAkB,QAAQC,IAAR,CAAaM,QAAQ,CAACP,IAAtB,CAArB,EAAkD;MAAgB;MAClE;IACC;;IAEDH,QAAQ,CAACW,IAAI,IAAIA,IAAI,CAACC,GAAL,CAASC,IAAI,IAAKA,IAAI,CAACC,EAAL,KAAYL,MAAZ,GAAqBC,QAArB,GAAgCG,IAAlD,CAAT,CAAwE;IAAxE,CAAR;EAEH,CAPD;;EAUA,MAAME,UAAU,GAAGD,EAAE,IAAI;IACrB,MAAME,SAAS,GAAG,CAAC,GAAGjB,KAAJ,EAAWkB,MAAX,CAAkBf,IAAI,IAAIA,IAAI,CAACY,EAAL,KAAYA,EAAtC,CAAlB,CADqB,CACyC;;IAE1Dd,QAAQ,CAACgB,SAAD,CAAR,CAHiB,CAGI;EAExB,CALL;;EAQIV,OAAO,CAACC,GAAR,CAAYR,KAAZ,EAnCmB,CAmCC;EAGxB;;EACA,MAAMmB,YAAY,GAAGJ,EAAE,IAAI;IACvB,IAAIK,YAAY,GAAGpB,KAAK,CAACa,GAAN,CAAUV,IAAI,IAAI;MACjC,IAAIA,IAAI,CAACY,EAAL,KAAYA,EAAhB,EAAoB;QAChBZ,IAAI,CAACkB,UAAL,GAAkB,CAAClB,IAAI,CAACkB,UAAxB,CADgB,CACoB;MACvC;;MACD,OAAOlB,IAAP,CAJiC,CAInB;IACjB,CALkB,CAAnB;IAMAF,QAAQ,CAACmB,YAAD,CAAR,CAPuB,CAOE;EAC5B,CARD;;EAYA,oBACQ;IAAA,wBACK;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADL,sBAEI,QAAC,QAAD;MAAU,QAAQ,EAAGlB;IAArB;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI,QAAC,IAAD;MAAM,KAAK,EAAEF,KAAb;MACA,YAAY,EAAEmB,YADd;MAEA,UAAU,EAAEH,UAFZ;MAGA,UAAU,EAAEP;IAHZ;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA,gBADR;AAYC,CA/DD;;GAAMV,Q;;KAAAA,Q;AAgEN,eAAeA,QAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}