{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Program0907\\\\OneDrive\\\\Desktop\\\\Coding Dojo\\\\MernStack\\\\React\\\\toDoApp\\\\react-todoapp\\\\src\\\\components\\\\TodoForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react'; //hooks go in curly brackets\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TodoForm(props) {\n  _s();\n\n  //Function 1: Constructor; props are simular to parameters in other languages\n  const [input, setInput] = useState(props.edit ? props.edit.value : ''); //ternary operator, why are these variable in sqaure brackets\n\n  const inputRef = useRef(null); //takes the input and stores it into useRef to use it dynamically\n\n  useEffect(() => {\n    inputRef.current.focus(); //focuses on input upon render\n  });\n\n  const handleChange = e => {\n    //handles changes in the input field\n    setInput(e.target.value); //set the change in the input field and set it as input\n  }; //what happens upon submission\n\n\n  const handleSubmit = e => {\n    //what is e\n    e.preventDefault(); //will cancel if cancellable\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      //generate id\n      text: input //set Input\n\n    });\n    setInput('');\n  }; //This is both the add and update forms\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"todo-form\",\n    children: props.edit ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Update yoou item\",\n        value: input,\n        onChange: handleChange,\n        name: \"text\",\n        ref: inputRef,\n        className: \"todo-input edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        classname: \"todo-button edit\",\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    //tenary conditional operator\n    //find out\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Add a todo\",\n        value: input,\n        onChange: handleChange,\n        name: \"text\",\n        className: \"todo-input\",\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: \"todo-button\",\n        children: \"Add todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TodoForm, \"GaPkIgsAGbjgVrcgXZQ8088YCs4=\");\n\n_c = TodoForm;\nexport default TodoForm; // 1. imports : react, useState, useRef, useEffect\n// 2. Build the TodoForm Function\n//     a. put both input and/or setInput into State\n//     b. make sure focus is on input field on render\n//     c. Handle Submission function\n//         a. e.preventDefault();  validate for not _blank\n//         b. set properies to the todo upon submission \n//         c. setInput('') of empty string\n//     d. edit Form\n//     e. ternary conditional\n//     f. addform\n// 3. Export ToDoForm\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoForm\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TodoForm","props","input","setInput","edit","value","inputRef","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text"],"sources":["C:/Users/Program0907/OneDrive/Desktop/Coding Dojo/MernStack/React/toDoApp/react-todoapp/src/components/TodoForm.js"],"sourcesContent":["import React, {useState, useEffect, useRef} from 'react'; //hooks go in curly brackets\r\n\r\nfunction TodoForm(props)  {  //Function 1: Constructor; props are simular to parameters in other languages\r\n    const [input, setInput] = useState(props.edit ? props.edit.value: ''); //ternary operator, why are these variable in sqaure brackets\r\n\r\nconst inputRef = useRef(null);  //takes the input and stores it into useRef to use it dynamically\r\n\r\nuseEffect(() => {\r\n    inputRef.current.focus();  //focuses on input upon render\r\n});\r\n\r\nconst handleChange = e => {   //handles changes in the input field\r\n    setInput(e.target.value);  //set the change in the input field and set it as input\r\n};\r\n\r\n//what happens upon submission\r\nconst handleSubmit = e => {    //what is e\r\n    e.preventDefault();     //will cancel if cancellable\r\n    \r\n    props.onSubmit({\r\n        id: Math.floor(Math.random() * 10000),  //generate id\r\n        text: input                              //set Input\r\n    });\r\n    setInput('');\r\n    };\r\n    //This is both the add and update forms\r\n    return (\r\n        <form onSubmit={handleSubmit} className='todo-form'> \r\n            {props.edit ? (\r\n            <>\r\n            <input\r\n                placeholder='Update yoou item' \r\n                value={input}\r\n                onChange={handleChange}\r\n                name='text' \r\n                ref={inputRef}\r\n                className='todo-input edit'\r\n            />\r\n            <button onClick={handleSubmit} classname='todo-button edit'>\r\n            Update\r\n            </button>\r\n            </>\r\n            ) : (  //tenary conditional operator\r\n                    //find out\r\n                <>  \r\n            <input\r\n                placeholder='Add a todo'\r\n                value={input}\r\n                onChange={handleChange}\r\n                name='text'\r\n                className='todo-input'\r\n                ref={inputRef}\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button'>\r\n                Add todo\r\n            </button>\r\n            </>\r\n            )}\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;\r\n\r\n\r\n// 1. imports : react, useState, useRef, useEffect\r\n// 2. Build the TodoForm Function\r\n//     a. put both input and/or setInput into State\r\n//     b. make sure focus is on input field on render\r\n//     c. Handle Submission function\r\n//         a. e.preventDefault();  validate for not _blank\r\n//         b. set properies to the todo upon submission \r\n//         c. setInput('') of empty string\r\n//     d. edit Form\r\n//     e. ternary conditional\r\n//     f. addform\r\n// 3. Export ToDoForm\r\n\r\n        \r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD,C,CAA0D;;;;;AAE1D,SAASC,QAAT,CAAkBC,KAAlB,EAA0B;EAAA;;EAAG;EACzB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAACI,KAAK,CAACG,IAAN,GAAaH,KAAK,CAACG,IAAN,CAAWC,KAAxB,GAA+B,EAAhC,CAAlC,CADsB,CACiD;;EAE3E,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAD,CAAvB,CAH0B,CAGM;;EAEhCD,SAAS,CAAC,MAAM;IACZQ,QAAQ,CAACC,OAAT,CAAiBC,KAAjB,GADY,CACe;EAC9B,CAFQ,CAAT;;EAIA,MAAMC,YAAY,GAAGC,CAAC,IAAI;IAAI;IAC1BP,QAAQ,CAACO,CAAC,CAACC,MAAF,CAASN,KAAV,CAAR,CADsB,CACK;EAC9B,CAFD,CAT0B,CAa1B;;;EACA,MAAMO,YAAY,GAAGF,CAAC,IAAI;IAAK;IAC3BA,CAAC,CAACG,cAAF,GADsB,CACE;;IAExBZ,KAAK,CAACa,QAAN,CAAe;MACXC,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,CADO;MAC6B;MACxCC,IAAI,EAAEjB,KAFK,CAE8B;;IAF9B,CAAf;IAIAC,QAAQ,CAAC,EAAD,CAAR;EACC,CARL,CAd0B,CAuBtB;;;EACA,oBACI;IAAM,QAAQ,EAAES,YAAhB;IAA8B,SAAS,EAAC,WAAxC;IAAA,UACKX,KAAK,CAACG,IAAN,gBACD;MAAA,wBACA;QACI,WAAW,EAAC,kBADhB;QAEI,KAAK,EAAEF,KAFX;QAGI,QAAQ,EAAEO,YAHd;QAII,IAAI,EAAC,MAJT;QAKI,GAAG,EAAEH,QALT;QAMI,SAAS,EAAC;MANd;QAAA;QAAA;QAAA;MAAA,QADA,eASA;QAAQ,OAAO,EAAEM,YAAjB;QAA+B,SAAS,EAAC,kBAAzC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATA;IAAA,gBADC;IAAA;IAcM;IACC;IACJ;MAAA,wBACJ;QACI,WAAW,EAAC,YADhB;QAEI,KAAK,EAAEV,KAFX;QAGI,QAAQ,EAAEO,YAHd;QAII,IAAI,EAAC,MAJT;QAKI,SAAS,EAAC,YALd;QAMI,GAAG,EAAEH;MANT;QAAA;QAAA;QAAA;MAAA,QADI,eASJ;QAAQ,OAAO,EAAEM,YAAjB;QAA+B,SAAS,EAAC,aAAzC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATI;IAAA;EAjBR;IAAA;IAAA;IAAA;EAAA,QADJ;AAkCH;;GA1DQZ,Q;;KAAAA,Q;AA4DT,eAAeA,QAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}