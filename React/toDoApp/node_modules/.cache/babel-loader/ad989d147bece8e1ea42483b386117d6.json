{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Program0907\\\\OneDrive\\\\Desktop\\\\Coding Dojo\\\\MernStack\\\\React\\\\toDoApp\\\\react-todoapp\\\\src\\\\components\\\\ToDoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ToDoForm from './ToDoForm';\nimport ToDo from './ToDo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoList = _props => {\n  _s();\n\n  const [todos, setTodos] = useState([]); //storing input to state\n\n  const addTodo = todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      //Validating input is not blank\n      return;\n    }\n\n    const newTodos = [todo, ...todos]; //creating an empty array for newtodos\n\n    setTodos(newTodos);\n  };\n\n  const updateToDo = (todoId, newValue) => {\n    //to update a todo, we need the id of the todo and its current value\n    if (!todos.text || /^\\s*$/.test(todos.text)) {\n      return;\n    }\n\n    if (updateToDo) setTodos(prev => prev.map(item => item.id === todoId ? newValue : item));\n  };\n\n  const removeTodo = id => {\n    const removeArr = [...todos].filter(todo => todo.id !== id);\n    setTodos(removeArr);\n  };\n\n  console.log(todos);\n\n  const completeTodo = id => {\n    let updatedTodos = ToDo.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n\n      return todo;\n      setTodos(updatedTodos);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" What 's the Plan for Today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToDoForm, {\n      onSubmit: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToDo, {\n      todos: ToDo,\n      completeTodo: completeTodo,\n      removeTodo: removeTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ToDoList, \"ZATHeV9x55jFrDOww2hwcxQ3V1U=\");\n\n_c = ToDoList;\nexport default ToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["React","useState","ToDoForm","ToDo","ToDoList","_props","todos","setTodos","addTodo","todo","text","test","newTodos","updateToDo","todoId","newValue","prev","map","item","id","removeTodo","removeArr","filter","console","log","completeTodo","updatedTodos","isComplete"],"sources":["C:/Users/Program0907/OneDrive/Desktop/Coding Dojo/MernStack/React/toDoApp/react-todoapp/src/components/ToDoList.js"],"sourcesContent":["import React, {\r\n    useState\r\n} from 'react';\r\nimport ToDoForm from './ToDoForm';\r\nimport ToDo from './ToDo';\r\n\r\n\r\nconst ToDoList = (_props) => {\r\n    const [todos, setTodos] = useState([]) //storing input to state\r\n\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) { //Validating input is not blank\r\n            return;\r\n        }\r\n        \r\n        const newTodos = [todo, ...todos]; //creating an empty array for newtodos\r\n        setTodos(newTodos);\r\n    };\r\n\r\nconst updateToDo = (todoId, newValue) => {                      //to update a todo, we need the id of the todo and its current value\r\n    if(!todos.text || /^\\s*$/.test(todos.text)) {\r\n        return;\r\n\r\n    }\r\n    if(updateToDo)\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\r\n    );\r\n};\r\n\r\nconst removeTodo = id => {\r\n    const removeArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n        setTodos(removeArr);\r\n\r\n    };\r\n\r\n    \r\n        console.log(todos)\r\n    \r\nconst completeTodo = id => {\r\n    let updatedTodos = ToDo.map(todo => {\r\n        if (todo.id === id) {\r\n            todo.isComplete = !todo.isComplete;\r\n        }\r\n        return todo;\r\n        setTodos(updatedTodos);\r\n    })\r\n};\r\n\r\n    return ( \r\n        <div>\r\n            <h1> What 's the Plan for Today?</h1>\r\n            <ToDoForm onSubmit= {addTodo}/> \r\n            <ToDo todos={ToDo} completeTodo={completeTodo} removeTodo=\r\n            {removeTodo} />    \r\n        </div>\r\n    );\r\n    \r\n    };\r\nexport default ToDoList;"],"mappings":";;;AAAA,OAAOA,KAAP,IACIC,QADJ,QAEO,OAFP;AAGA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAGA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;EAAA;;EACzB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC,CADyB,CACc;;EAGvC,MAAMO,OAAO,GAAGC,IAAI,IAAI;IACpB,IAAI,CAACA,IAAI,CAACC,IAAN,IAAc,QAAQC,IAAR,CAAaF,IAAI,CAACC,IAAlB,CAAlB,EAA2C;MAAE;MACzC;IACH;;IAED,MAAME,QAAQ,GAAG,CAACH,IAAD,EAAO,GAAGH,KAAV,CAAjB,CALoB,CAKe;;IACnCC,QAAQ,CAACK,QAAD,CAAR;EACH,CAPD;;EASJ,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;IAAuB;IAC5D,IAAG,CAACT,KAAK,CAACI,IAAP,IAAe,QAAQC,IAAR,CAAaL,KAAK,CAACI,IAAnB,CAAlB,EAA4C;MACxC;IAEH;;IACD,IAAGG,UAAH,EACAN,QAAQ,CAACS,IAAI,IAAIA,IAAI,CAACC,GAAL,CAASC,IAAI,IAAKA,IAAI,CAACC,EAAL,KAAYL,MAAZ,GAAqBC,QAArB,GAAgCG,IAAlD,CAAT,CAAR;EAEH,CARD;;EAUA,MAAME,UAAU,GAAGD,EAAE,IAAI;IACrB,MAAME,SAAS,GAAG,CAAC,GAAGf,KAAJ,EAAWgB,MAAX,CAAkBb,IAAI,IAAIA,IAAI,CAACU,EAAL,KAAYA,EAAtC,CAAlB;IAEIZ,QAAQ,CAACc,SAAD,CAAR;EAEH,CALL;;EAQQE,OAAO,CAACC,GAAR,CAAYlB,KAAZ;;EAER,MAAMmB,YAAY,GAAGN,EAAE,IAAI;IACvB,IAAIO,YAAY,GAAGvB,IAAI,CAACc,GAAL,CAASR,IAAI,IAAI;MAChC,IAAIA,IAAI,CAACU,EAAL,KAAYA,EAAhB,EAAoB;QAChBV,IAAI,CAACkB,UAAL,GAAkB,CAAClB,IAAI,CAACkB,UAAxB;MACH;;MACD,OAAOlB,IAAP;MACAF,QAAQ,CAACmB,YAAD,CAAR;IACH,CANkB,CAAnB;EAOH,CARD;;EAUI,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI,QAAC,QAAD;MAAU,QAAQ,EAAGlB;IAArB;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI,QAAC,IAAD;MAAM,KAAK,EAAEL,IAAb;MAAmB,YAAY,EAAEsB,YAAjC;MAA+C,UAAU,EACxDL;IADD;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AASC,CApDL;;GAAMhB,Q;;KAAAA,Q;AAqDN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}